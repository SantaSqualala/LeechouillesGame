//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""HunterInputs"",
            ""id"": ""59841f64-f4db-4c06-a1e2-427b2a8d69ac"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fb2acb8b-e6a6-43f7-b630-5d4194b3feca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f7ea255-77f8-4a39-8883-69b1f486d6e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6644fc5a-6694-4b74-9824-9ff8b1a7e018"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""0998465d-aab9-458a-857a-a8c43f82b39c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b0e82a01-b921-405e-820f-14c6fa5ad64c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan"",
                    ""type"": ""Button"",
                    ""id"": ""8914ddce-445c-4822-8775-fe7e6a8b2be1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""658bdfb4-c45c-4905-a0d8-33ab49223b2d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ada7f580-63c8-42e6-b241-0ff630768829"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f108b244-8b28-431f-a249-8823543abfcb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39f6cc04-69e0-4f6f-8f4d-506243191965"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f66a754e-ffce-4540-973f-edd2aaa24960"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b566d45-84ae-422b-afe7-977ee55befd6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""513d38a8-239b-4f6e-bfcd-ac63cac4bba0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b957f8e6-63f9-4d59-8b96-8fa18809b755"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f68017a7-8088-45eb-90c6-fd63889aeb67"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9e0eee0b-1411-4bf7-a17d-4a287f9478aa"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b249d91-c1b3-4369-8122-64723a77a6b1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c6253fb-2b5e-4671-9e37-167972e40073"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f23ce28-efc9-4858-b0b6-89eb52857f7c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caeaf123-80fe-4b50-9023-d75c38e79694"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6e32ce0-50d3-48d3-94ef-05ad386ddd64"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fdedc11-b22d-4f5c-8df9-0aac6b49cb3b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AlienInputs"",
            ""id"": ""6bc74981-875d-4927-a036-0d724bd7eecc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""39bd7c05-f162-4bf0-aa81-0ff8f60befad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ce85cc66-50fa-4956-8ec3-0c48e3c8aeaf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4946120d-aa38-47e1-9a4f-43115e0076da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""153d42ee-1c19-48b2-8758-4f8537d43dfb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""40a62904-1b3e-4b85-90a1-4bf5db88290b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ab7f6b7a-2c3f-460f-9751-4a7a448d9dee"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a169dda3-fe7e-4f77-93c2-321e9ee38941"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""142e34db-d3e0-4c01-bd4a-8b6c5c8c7e8c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""697298fc-cf05-46eb-9f93-9480da5b081f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d289ec5-1578-4498-b92d-1bbb88f401b4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be400922-4dbd-42b2-830e-9e9f78747610"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""036894d3-f047-4833-8fa1-36c954737056"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef63fc81-fe7e-4b9e-b506-3ce6ede16d75"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // HunterInputs
        m_HunterInputs = asset.FindActionMap("HunterInputs", throwIfNotFound: true);
        m_HunterInputs_Movement = m_HunterInputs.FindAction("Movement", throwIfNotFound: true);
        m_HunterInputs_Look = m_HunterInputs.FindAction("Look", throwIfNotFound: true);
        m_HunterInputs_Fire = m_HunterInputs.FindAction("Fire", throwIfNotFound: true);
        m_HunterInputs_Sprint = m_HunterInputs.FindAction("Sprint", throwIfNotFound: true);
        m_HunterInputs_Jump = m_HunterInputs.FindAction("Jump", throwIfNotFound: true);
        m_HunterInputs_Scan = m_HunterInputs.FindAction("Scan", throwIfNotFound: true);
        // AlienInputs
        m_AlienInputs = asset.FindActionMap("AlienInputs", throwIfNotFound: true);
        m_AlienInputs_Movement = m_AlienInputs.FindAction("Movement", throwIfNotFound: true);
        m_AlienInputs_Look = m_AlienInputs.FindAction("Look", throwIfNotFound: true);
        m_AlienInputs_Jump = m_AlienInputs.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HunterInputs
    private readonly InputActionMap m_HunterInputs;
    private IHunterInputsActions m_HunterInputsActionsCallbackInterface;
    private readonly InputAction m_HunterInputs_Movement;
    private readonly InputAction m_HunterInputs_Look;
    private readonly InputAction m_HunterInputs_Fire;
    private readonly InputAction m_HunterInputs_Sprint;
    private readonly InputAction m_HunterInputs_Jump;
    private readonly InputAction m_HunterInputs_Scan;
    public struct HunterInputsActions
    {
        private @PlayerControls m_Wrapper;
        public HunterInputsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_HunterInputs_Movement;
        public InputAction @Look => m_Wrapper.m_HunterInputs_Look;
        public InputAction @Fire => m_Wrapper.m_HunterInputs_Fire;
        public InputAction @Sprint => m_Wrapper.m_HunterInputs_Sprint;
        public InputAction @Jump => m_Wrapper.m_HunterInputs_Jump;
        public InputAction @Scan => m_Wrapper.m_HunterInputs_Scan;
        public InputActionMap Get() { return m_Wrapper.m_HunterInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HunterInputsActions set) { return set.Get(); }
        public void SetCallbacks(IHunterInputsActions instance)
        {
            if (m_Wrapper.m_HunterInputsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnFire;
                @Sprint.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnSprint;
                @Jump.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnJump;
                @Scan.started -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnScan;
                @Scan.performed -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnScan;
                @Scan.canceled -= m_Wrapper.m_HunterInputsActionsCallbackInterface.OnScan;
            }
            m_Wrapper.m_HunterInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Scan.started += instance.OnScan;
                @Scan.performed += instance.OnScan;
                @Scan.canceled += instance.OnScan;
            }
        }
    }
    public HunterInputsActions @HunterInputs => new HunterInputsActions(this);

    // AlienInputs
    private readonly InputActionMap m_AlienInputs;
    private IAlienInputsActions m_AlienInputsActionsCallbackInterface;
    private readonly InputAction m_AlienInputs_Movement;
    private readonly InputAction m_AlienInputs_Look;
    private readonly InputAction m_AlienInputs_Jump;
    public struct AlienInputsActions
    {
        private @PlayerControls m_Wrapper;
        public AlienInputsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_AlienInputs_Movement;
        public InputAction @Look => m_Wrapper.m_AlienInputs_Look;
        public InputAction @Jump => m_Wrapper.m_AlienInputs_Jump;
        public InputActionMap Get() { return m_Wrapper.m_AlienInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlienInputsActions set) { return set.Get(); }
        public void SetCallbacks(IAlienInputsActions instance)
        {
            if (m_Wrapper.m_AlienInputsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_AlienInputsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_AlienInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public AlienInputsActions @AlienInputs => new AlienInputsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IHunterInputsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnScan(InputAction.CallbackContext context);
    }
    public interface IAlienInputsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
